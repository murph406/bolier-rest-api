{"version":3,"file":"index.js","names":["express","cookieParser","cors","dotenv","cluster","os","Router","process","env","NODE_ENV","catch","err","console","warn","message","config","PORT","numCPUs","cpus","length","isPrimary","log","pid","i","fork","on","worker","code","signal","app","use","req","res","next","method","url","credentials","origin","callback","server","listen","Date","setTimeout"],"sources":["../src/index.js"],"sourcesContent":["import express from \"express\"\nimport cookieParser from \"cookie-parser\"\nimport cors from 'cors'\nimport dotenv from 'dotenv'\nimport cluster from 'cluster'\nimport os from 'os'\nimport Router from \"./routes/index.js\"\n\nif (process.env.NODE_ENV == 'dev') {\n    import('source-map-support/register.js').catch(err => {\n        console.warn('Source map support could not be enabled:', err.message)\n    })\n}\n\ndotenv.config()\nconst PORT = process.env.PORT || 80\nconst numCPUs = process.env.NODE_ENV == 'dev' ? 1 : os.cpus().length\n\nif (cluster.isPrimary) {\n    console.log(`Primary ${process.pid} is running`)\n\n    for (let i = 0; i < numCPUs; i++) {\n        cluster.fork()\n    }\n\n    cluster.on('exit', (worker, code, signal) => {\n        console.log(`Worker ${worker.process.pid} died with code: ${code} and signal: ${signal}`);\n        console.log('Starting a new worker');\n        cluster.fork();\n    })\n\n    cluster.on('online', (worker) => {\n        console.log(`Worker ${worker.process.pid} is online`);\n    })\n} else {\n    const app = express()\n\n    app.use((req, res, next) => {\n        console.log(`Worker ${process.pid} handling request: ${req.method} ${req.url}`);\n        next();\n    })\n\n    app.use(cors({\n        credentials: true,\n        origin: function (origin, callback) {\n            callback(null, true);\n        }\n    }))\n\n    app.use('/api',\n        Router\n    )\n\n    const server = app.listen(PORT, async () => {\n        console.log(`Worker ${process.pid} listening on port ${PORT} at ${new Date()}`);\n    }).setTimeout(240000)\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,YAAY,MAAM,eAAe;AACxC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,MAAM;AAEb,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,KAAK,EAAE;EAC/B,MAAM,CAAC,gCAAgC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;IAClDC,OAAO,CAACC,IAAI,CAAC,0CAA0C,EAAEF,GAAG,CAACG,OAAO,CAAC;EACzE,CAAC,CAAC;AACN;AAEAX,MAAM,CAACY,MAAM,CAAC,CAAC;AACf,MAAMC,IAAI,GAAGT,OAAO,CAACC,GAAG,CAACQ,IAAI,IAAI,EAAE;AACnC,MAAMC,OAAO,GAAGV,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,KAAK,GAAG,CAAC,GAAGJ,EAAE,CAACa,IAAI,CAAC,CAAC,CAACC,MAAM;AAEpE,IAAIf,OAAO,CAACgB,SAAS,EAAE;EACnBR,OAAO,CAACS,GAAG,CAAC,WAAWd,OAAO,CAACe,GAAG,aAAa,CAAC;EAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,EAAEM,CAAC,EAAE,EAAE;IAC9BnB,OAAO,CAACoB,IAAI,CAAC,CAAC;EAClB;EAEApB,OAAO,CAACqB,EAAE,CAAC,MAAM,EAAE,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,KAAK;IACzChB,OAAO,CAACS,GAAG,CAAC,UAAUK,MAAM,CAACnB,OAAO,CAACe,GAAG,oBAAoBK,IAAI,gBAAgBC,MAAM,EAAE,CAAC;IACzFhB,OAAO,CAACS,GAAG,CAAC,uBAAuB,CAAC;IACpCjB,OAAO,CAACoB,IAAI,CAAC,CAAC;EAClB,CAAC,CAAC;EAEFpB,OAAO,CAACqB,EAAE,CAAC,QAAQ,EAAGC,MAAM,IAAK;IAC7Bd,OAAO,CAACS,GAAG,CAAC,UAAUK,MAAM,CAACnB,OAAO,CAACe,GAAG,YAAY,CAAC;EACzD,CAAC,CAAC;AACN,CAAC,MAAM;EACH,MAAMO,GAAG,GAAG7B,OAAO,CAAC,CAAC;EAErB6B,GAAG,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;IACxBrB,OAAO,CAACS,GAAG,CAAC,UAAUd,OAAO,CAACe,GAAG,sBAAsBS,GAAG,CAACG,MAAM,IAAIH,GAAG,CAACI,GAAG,EAAE,CAAC;IAC/EF,IAAI,CAAC,CAAC;EACV,CAAC,CAAC;EAEFJ,GAAG,CAACC,GAAG,CAAC5B,IAAI,CAAC;IACTkC,WAAW,EAAE,IAAI;IACjBC,MAAM,EAAE,SAAAA,CAAUA,MAAM,EAAEC,QAAQ,EAAE;MAChCA,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;IACxB;EACJ,CAAC,CAAC,CAAC;EAEHT,GAAG,CAACC,GAAG,CAAC,MAAM,EACVxB,MACJ,CAAC;EAED,MAAMiC,MAAM,GAAGV,GAAG,CAACW,MAAM,CAACxB,IAAI,EAAE,YAAY;IACxCJ,OAAO,CAACS,GAAG,CAAC,UAAUd,OAAO,CAACe,GAAG,sBAAsBN,IAAI,OAAO,IAAIyB,IAAI,CAAC,CAAC,EAAE,CAAC;EACnF,CAAC,CAAC,CAACC,UAAU,CAAC,MAAM,CAAC;AACzB","ignoreList":[]}